name: "Chapter 09: Create release"
permissions:
  actions: write
  packages: write
  contents: read
on:
  registry_package: 
    types: [published]

env:
  deploymentfileFolder: 'deployment-automation'
  GH_TOKEN: ${{ secrets.EXTENDED_ACCESSTOKEN }} #required for gh tool
# only run this workflow when a package is published with a tag
# that is not empty. We cancel any other releases that are in progress
# before we create the GH Release, we need the latest version of the images
# we use these to patch the deployment files with the correct versions
# and then create a release with the version provided by the package push

jobs:
  release:
    if: github.event.registry_package.package_version.container_metadata.tag.name != ''
    concurrency:
      group: ${{github.event.registry_package.package_version.container_metadata.tag.name}}
      cancel-in-progress: true
    runs-on: ${{ vars.JOBS_RUNNER }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      # get the versions of the images from the package registry
      - name: Retrieve latest image version frontend 
        run: |
          export FRONTED_VERSION=$(gh api user/packages/container/frontend/versions | jq -r '.[0].metadata.container.tags[0]') 
          echo "FRONTED_VERSION=$FRONTED_VERSION" >> $GITHUB_ENV
          export ORDERING_VERSION=$(gh api user/packages/container/ordering/versions | jq -r '.[0].metadata.container.tags[0]')
          echo "ORDERING_VERSION=$ORDERING_VERSION" >> $GITHUB_ENV
          export CATALOG_VERSION=$(gh api user/packages/container/catalog/versions | jq -r '.[0].metadata.container.tags[0]')   
          echo "CATALOG_VERSION=$CATALOG_VERSION" >> $GITHUB_ENV
      # patch the deployment files with the correct versions.
      # we do this for catalog, frontend and ordering

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.3
        with:
          files: '["${{github.workspace}}/${{env.deploymentfileFolder}}/catalog.yaml"]'
        env: 
          Build.version: ${{env.CATALOG_VERSION}}

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.3
        with:
          files: '["${{github.workspace}}/${{env.deploymentfileFolder}}/frontend.yaml"]'
        env:
          Build.version: ${{env.FRONTED_VERSION}}

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.3
        with:
          files: '["${{github.workspace}}/${{env.deploymentfileFolder}}/ordering.yaml"]'
        env:
          Build.version: ${{env.ORDERING_VERSION}}

      # create a release with the version provided by package push that 
      # contains the deployment files
      - name: Create a release with version provided by package push
        uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.EXTENDED_ACCESSTOKEN }}"
          tag_name: "v${{github.event.registry_package.package_version.container_metadata.tag.name}}"
          generate_release_notes: true
          files: |
            ${{github.workspace}}/${{env.deploymentfileFolder}}/frontend.yaml
            ${{github.workspace}}/${{env.deploymentfileFolder}}/ordering.yaml
            ${{github.workspace}}/${{env.deploymentfileFolder}}/catalog.yaml
